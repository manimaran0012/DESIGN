#include <Wire.h>
#include <WiFi.h>
#include <Firebase.h>
#include <Adafruit_INA219.h>

// ==============================
// 🔹 Firebase Database URL
// ==============================
#define FIREBASE_URL "https://solarproject-92dff-default-rtdb.firebaseio.com/"
Firebase fb(FIREBASE_URL);

// ==============================
// 🔹 Wi-Fi Credentials
// ==============================
const char* ssids[] = {"Infinix HOT 30 5G", "Galaxy F6292c9", "DESKTOP-LA7NV8S 3011"};
const char* passwords[] = {"mani00122", "dxwm3987", "manimaran"};
const int WIFI_COUNT = 3;

// ==============================
// 🔹 Relay Pins (LOW-level trigger)
// ==============================
#define RELAY1 25  // FAN
#define RELAY2 26  // LIGHT1
#define RELAY3 27  // LIGHT2

// ==============================
// 🔹 INA219 Connections (I2C)
// ==============================
// ESP32  --->  INA219
// 3.3V   --->  VCC
// GND    --->  GND
// GPIO 21 ---> SDA
// GPIO 22 ---> SCL
Adafruit_INA219 ina219;

// ==============================
// 🔹 Timers
// ==============================
unsigned long previousMillis = 0;
unsigned long sensorMillis = 0;
const long firebaseInterval = 500;   // Read relay states every 0.5s
const long sensorInterval = 2000;    // Send INA219 data every 2s

// =============================================================
// 🔹 SETUP
// =============================================================
void setup() {
  Serial.begin(115200);

  // Initialize I2C for INA219
  Wire.begin(21, 22);  // SDA=21, SCL=22
  delay(100);

  connectToWiFi();

  pinMode(RELAY1, OUTPUT);
  pinMode(RELAY2, OUTPUT);
  pinMode(RELAY3, OUTPUT);

  if (!ina219.begin()) {
    Serial.println("❌ INA219 not found! Check wiring and I2C address.");
    while (1);
  }
  ina219.setCalibration_32V_2A();

  Serial.println("✅ Setup complete! Monitoring Firebase and INA219...");
}

// =============================================================
// 🔹 LOOP
// =============================================================
void loop() {
  unsigned long currentMillis = millis();

  // --- Control relays from Firebase ---
  if (currentMillis - previousMillis >= firebaseInterval) {
    previousMillis = currentMillis;
    updateRelaysFromFirebase();
  }

  // --- Read and upload INA219 data ---
  if (currentMillis - sensorMillis >= sensorInterval) {
    sensorMillis = currentMillis;
    readAndUploadINA219();
  }
}

// =============================================================
// 🔹 FUNCTION: Update Relays Based on Firebase Data
// =============================================================
void updateRelaysFromFirebase() {
  String fan = "", light1 = "", light2 = "";

  if (fb.getString("SOLAR_HOME_AUTOMATION/FAN", fan) &&
      fb.getString("SOLAR_HOME_AUTOMATION/LIGHT1", light1) &&
      fb.getString("SOLAR_HOME_AUTOMATION/LIGHT2", light2)) {

    fan.trim(); fan.replace("\"", "");
    light1.trim(); light1.replace("\"", "");
    light2.trim(); light2.replace("\"", "");

    Serial.printf("Firebase -> FAN:%s | LIGHT1:%s | LIGHT2:%s\n",
                  fan.c_str(), light1.c_str(), light2.c_str());

    // Control relays (LOW-level trigger)
    digitalWrite(RELAY1, fan.equalsIgnoreCase("true") ? LOW : HIGH);
    digitalWrite(RELAY2, light1.equalsIgnoreCase("true") ? LOW : HIGH);
    digitalWrite(RELAY3, light2.equalsIgnoreCase("true") ? LOW : HIGH);
  } else {
    Serial.println("⚠️ Failed to read Firebase data");
  }
}

// =============================================================
// 🔹 FUNCTION: Read INA219 Data and Upload to Firebase
// =============================================================
void readAndUploadINA219() {
  float busVoltage = ina219.getBusVoltage_V();      // Voltage (V)
  float current_mA = ina219.getCurrent_mA();        // Current (mA)
  float power_mW = ina219.getPower_mW();            // Power (mW)

  float current_A = current_mA / 1000.0;            // Convert to A
  float power_W = power_mW / 1000.0;                // Convert to W

  // Battery percentage for 3S Li-ion (9.6V–12.6V)
  float percent = (busVoltage - 9.6) * 100 / (12.6 - 9.6);
  if (percent > 100) percent = 100;
  if (percent < 0) percent = 0;

  // Print values
  Serial.println("--------- INA219 Sensor Data ---------");
  Serial.printf("Voltage: %.2f V | Current: %.3f A | Power: %.3f W | Battery: %.1f%%\n",
                busVoltage, current_A, power_W, percent);
  Serial.println("--------------------------------------");

  // Upload to Firebase
  fb.setFloat("SOLAR_HOME_AUTOMATION/Voltage", busVoltage);
  fb.setFloat("SOLAR_HOME_AUTOMATION/Current", current_A);
  fb.setFloat("SOLAR_HOME_AUTOMATION/Power", power_W);
  fb.setFloat("SOLAR_HOME_AUTOMATION/Battery_Percentage", percent);
}

// =============================================================
// 🔹 FUNCTION: Connect to Available Wi-Fi
// =============================================================
void connectToWiFi() {
  Serial.println("Scanning Wi-Fi...");
  int n = WiFi.scanNetworks();
  if (n == 0) {
    Serial.println("⚠️ No networks found!");
    return;
  }

  for (int i = 0; i < WIFI_COUNT; i++) {
    for (int j = 0; j < n; j++) {
      if (String(WiFi.SSID(j)) == ssids[i]) {
        Serial.print("Connecting to "); Serial.println(ssids[i]);
        WiFi.begin(ssids[i], passwords[i]);
        int attempts = 0;
        while (WiFi.status() != WL_CONNECTED && attempts < 20) {
          delay(500);
          Serial.print(".");
          attempts++;
        }
        if (WiFi.status() == WL_CONNECTED) {
          Serial.println("\n✅ Wi-Fi Connected! IP: " + WiFi.localIP().toString());
          return;
        } else {
          Serial.println("\nFailed to connect, trying next...");
        }
      }
    }
  }
  Serial.println("⚠️ No known Wi-Fi found.");
}
