#include <WiFi.h>
#include <Firebase.h>

#define FIREBASE_URL "https://solarproject-92dff-default-rtdb.firebaseio.com/"
Firebase fb(FIREBASE_URL);

// Wi-Fi credentials
const char* ssids[] = {"Infinix HOT 30 5G", "Galaxy F6292c9", "DESKTOP-LA7NV8S 3011"};
const char* passwords[] = {"mani00122", "dxwm3987", "manimaran"};
const int WIFI_COUNT = 3;

// Relay pins (LOW-level trigger)
#define RELAY1 25  // FAN
#define RELAY2 26  // LIGHT1
#define RELAY3 27  // LIGHT2

unsigned long previousMillis = 0;
const long interval = 500; // Check Firebase every 500ms

void setup() {
  Serial.begin(115200);
  connectToWiFi();

  pinMode(RELAY1, OUTPUT);
  pinMode(RELAY2, OUTPUT);
  pinMode(RELAY3, OUTPUT);

  // Do NOT set default OFF here
  Serial.println("Setup complete, relays will follow Firebase data");
}

void loop() {
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    String fan = "";
    String light1 = "";
    String light2 = "";

    if (fb.getString("SOLAR_HOME_AUTOMATION/FAN", fan) &&
        fb.getString("SOLAR_HOME_AUTOMATION/LIGHT1", light1) &&
        fb.getString("SOLAR_HOME_AUTOMATION/LIGHT2", light2)) {

      // Clean strings (remove quotes/newlines)
      fan.trim(); fan.replace("\"", "");
      light1.trim(); light1.replace("\"", "");
      light2.trim(); light2.replace("\"", "");

      Serial.print("FAN: "); Serial.print(fan);
      Serial.print(" | LIGHT1: "); Serial.print(light1);
      Serial.print(" | LIGHT2: "); Serial.println(light2);

      // LOW-level trigger relay control (directly follow Firebase)
      digitalWrite(RELAY1, fan.equalsIgnoreCase("true") ? LOW : HIGH);
      digitalWrite(RELAY2, light1.equalsIgnoreCase("true") ? LOW : HIGH);
      digitalWrite(RELAY3, light2.equalsIgnoreCase("true") ? LOW : HIGH);

    } else {
      Serial.println("Failed to read Firebase devices!");
    }
  }
}

void connectToWiFi() {
  Serial.println("Scanning Wi-Fi...");
  int n = WiFi.scanNetworks();
  if (n == 0) { Serial.println("No networks found!"); return; }

  for (int i = 0; i < WIFI_COUNT; i++) {
    for (int j = 0; j < n; j++) {
      if (String(WiFi.SSID(j)) == ssids[i]) {
        Serial.print("Connecting to "); Serial.println(ssids[i]);
        WiFi.begin(ssids[i], passwords[i]);
        int attempts = 0;
        while (WiFi.status() != WL_CONNECTED && attempts < 20) {
          delay(500);
          Serial.print(".");
          attempts++;
        }
        if (WiFi.status() == WL_CONNECTED) {
          Serial.println("\nWi-Fi Connected! IP: " + WiFi.localIP().toString());
          return;
        } else {
          Serial.println("\nFailed to connect, trying next...");
        }
      }
    }
  }
  Serial.println("No known Wi-Fi found.");
}
